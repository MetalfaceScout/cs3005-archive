x data.mIntPtr 
x taskmIntPtr 
x task.mIntPtr 
print mNumberTaskQueue 
clear break
clear
continue
start
continue
break calculateFractal
continue
start
start
coninue
continue
continue
start
next
next
start
break setComplexFractal
continue
step
satep
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
next
next
next
next
next
break 21
continue
next
next
next
next
next
next
back
s
sta
star
start
c
next
next
next
next
ne
next
next
back
start
c
start
c
start
break setComplexFractal(ActionData&) 
co=
c
step
finish
next
next
next
break ThreadedGrid::calculateAllNumbers() 
continue
c
start
c
step
step
finish
next
step
step
step
step
sstep
finish
finish
step
break 41
c
step
finish
step
finish
break 44
c
next
next
next
next
next
next
break ThreadedGrid::worker() 
c
start
c
step
step
step
step
step
step
finish
finish
step
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
nexxt
step
c
print 
print
c
q
break worker() 
continue 
start
c
next
next
next
next
print taskPtr->mRow
print taskPtr->mCol
nex
next
next
next
print mNumberTaskQueue
print mNumberTaskQueue.back 
print mNumberTaskQueue.back() 
print mNumberTaskQueue[9999]
print mNumberTaskQueue[10000]
print mNumberTaskQueue[9999]
print mNumberTaskQueue[9999]->mcol
print mNumberTaskQueue[9999]->mCol
print mNumberTaskQueue[9999]->mRow
print mNumberTaskQueue[9999]->getCol 
print mNumberTaskQueue[9999]->getCol() 
print mNumberTaskQueue[9999]->getRow() 
print mNumberTaskQueue[9998]->getRow() 
print mNumberTaskQueue[9999]->getCol() 
print mNumberTaskQueue[9998]->getCol() 
next
next
next
next
next
next
print mNumberTaskQueue.size()
c
start
c
finish
c
step
step
c
start
c
break worker
c
break ThreadedGrid::worker() 
c
make
break worker()
c
start
c
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
next
print data
n
c
start
c
step
thread
thread 
help thread
thread find
thread find 1
thread find 2
thread find 3
thread find 4
thread find 5
thread find 4
thread apply 3
thread apply 3 join
thread apply 3 help
thread apply 3 status
help thead
help thread
thread 3
back
next
next
c
thread 4
back
thread 5
back
print 0x55555559ca68
thread 1
print mVectorLock.lock()
